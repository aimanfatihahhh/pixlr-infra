name: CI/CD Pipeline for Pixlr Kubernetes Deployment

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Checkout the latest code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to Docker Hub using stored credentials
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build the Docker image and push it to Docker Hub
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/pixlr-app:$IMAGE_TAG . 
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/pixlr-app:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout the latest code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Run application tests inside a Docker container
      - name: Run Tests
        run: |
          docker run --rm ${{ secrets.DOCKER_HUB_USERNAME }}/pixlr-app:${{ env.IMAGE_TAG }} npm test  

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Install Trivy security scanner
      - name: Install Trivy
        run: |
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy-linux-amd64 -O trivy
          chmod +x trivy
          sudo mv trivy /usr/local/bin/

      # Scan the Docker image for vulnerabilities
      - name: Run Security Scan
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_HUB_USERNAME }}/pixlr-app:${{ env.IMAGE_TAG }} 

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [test, security_scan]

    steps:
      # Checkout the latest code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Install and configure kubectl for AWS
      - name: Setup Kubectl
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Update as needed

      # Install Helm for Kubernetes deployments
      - name: Setup Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Configure kubeconfig for Kubernetes access
      - name: Configure Kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name pixlr-cluster

      # Deploy the application to the Kubernetes cluster using Helm
      - name: Deploy to Kubernetes
        run: |
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          helm upgrade --install pixlr-app ./helm-chart \ 
            --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/pixlr-app \ 
            --set image.tag=$IMAGE_TAG

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy

    steps:
      # Configure kubeconfig to allow rollback operations
      - name: Configure Kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name pixlr-cluster

      # Rollback to the previous successful Kubernetes deployment using Helm
      - name: Rollback Deployment
        run: |
          helm rollback pixlr-app --wait  

